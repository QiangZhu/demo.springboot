server.context-path=/springboot
server.port=8082

spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=mysqlpwd
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
# @See https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
spring.data.jpa.repositories.enabled=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
#spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.

#spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.
#spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.
#spring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.
#spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.
#spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
#spring.jpa.properties.*= # Additional native properties to set on the JPA provider.




#See http://blog.didispace.com/springbootdata2/
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值 

# HTTP message conversion
spring.http.converters.preferred-json-mapper=jackson

# HTTP encoding (HttpEncodingProperties)
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
#spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.
#spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.
#spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.
#spring.http.encoding.mapping= # Locale to Encoding mapping.


# JACKSON (JacksonProperties)
# Date format string or a fully-qualified date format class name. For instance ``.
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.
#spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.
#spring.jackson.generator.*= # Jackson on/off features for generators.
#spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, "date-format" will be used as a fallback if it is configured with a format string.
#spring.jackson.locale= # Locale used for formatting.
#spring.jackson.mapper.*= # Jackson general purpose on/off features.
#spring.jackson.parser.*= # Jackson on/off features for parsers.
#spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
#spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.
#spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`